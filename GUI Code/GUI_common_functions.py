#########################################################################
# A collection of common functions used for GUIs                        #
# analysis scripts                                                      #
#                                                                       #
# Author: Trevor Stirling                                               #
# Date: Nov 16, 2023                                                    #
#########################################################################

import PySimpleGUI as psg
import pyvisa
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import numpy as np
import math
from datetime import date
import sys, os

minus_button = b''
plus_button = b''

def BluePSGButton(text, key='no_key'):
	if key == 'no_key':
		key = text
	rounded_blue_button = b''
	return psg.Button(text, font=('Tahoma', 12), image_data=rounded_blue_button, button_color=('black', psg.theme_background_color()), mouseover_colors=('#303030', psg.theme_background_color()), border_width=0, key=key)

def connect_to_Piezo(port, channel, axis):
	import serial
	from GUI_Interfaces import Newport_Piezo_Interface
	if sys.platform == "win32":
		return Newport_Piezo_Interface.Newport_Piezo("", port, channel, axis)
	else:
		psg.popup("Piezo is not yet configured for MacOS!")
		return False

def connect_to_PM(channel):
	from GUI_Interfaces import Newport_PM_Interface
	if sys.platform == "win32":
		from ctypes import c_int,c_bool,byref,windll
		address = r'C:\Program Files\Newport\Newport USB Driver\Bin\usbdll.dll'
		num_devices = c_int()
		windll.LoadLibrary(address).newp_usb_open_devices(c_int(0xCEC7), c_bool(1), byref(num_devices))
		if num_devices.value != 0:
			print(" Connected to Newport Power Meter via USB")
			return Newport_PM_Interface.Newport_PM("", address, channel)
		psg.popup("Could not connect to Newport Power Meter.")
		return False
	else:
		possible_addresses = ['USB0::0x104D::0xCEC7::NI-VISA-340787200::RAW','USB0::0x104D::0xCEC7::NI-VISA-336592896::RAW','USB0::0x104D::0xCEC7::NI-VISA-339738624::RAW','USB0::0x104D::0xCEC7::NI-VISA-341835776::RAW'] #Required on mac only, specific to each computer
		rm = pyvisa.ResourceManager()
		USB_connection = rm.list_resources('?*')
		if (len(USB_connection) <1):
			psg.popup("No USB devices detected. You may need to restart the computer.")
			return False
		for address in possible_addresses:
			if address in USB_connection:
				print(" Connected to Power Meter at",address)
				return Newport_PM_Interface.Newport_PM(rm, address, channel)
		psg.popup("No device found at any of "+str(possible_addresses))
		return False

def connect_to_GPIB(device_name,parameters=[]):
	if device_name == 'LDC3908':
		num_params = 7 #Source_mode,Source_channel,protection_voltage,protection_current,waveform,pulse_delay,pulse_width
		if len(parameters)<num_params:
			psg.popup(device_name+" requires "+str(num_params)+" parameters")
			return False
		from GUI_Interfaces import LDC3900_Interface
		GPIB_address = 'GPIB0::2::INSTR'
		rm = check_GPIB_connection(device_name, GPIB_address)
		if not rm:
			return False
		device_inst = LDC3900_Interface.LDC3900(rm, GPIB_address, parameters[1], parameters[0],8)
		device_type = 'Source'
	elif device_name == 'LDC3916':
		num_params = 7 #Source_mode,Source_channel,protection_voltage,protection_current,waveform,pulse_delay,pulse_width
		if len(parameters)<num_params:
			psg.popup(device_name+" requires "+str(num_params)+" parameters")
			return False
		from GUI_Interfaces import LDC3900_Interface
		GPIB_address = 'GPIB0::5::INSTR'
		rm = check_GPIB_connection(device_name, GPIB_address)
		if not rm:
			return False
		device_inst = LDC3900_Interface.LDC3900(rm, GPIB_address, parameters[1], parameters[0],16)
		device_type = 'Source'
	elif device_name == 'SR830':
		from GUI_Interfaces import SR830_Interface
		GPIB_address = 'GPIB0::8::INSTR'
		rm = check_GPIB_connection(device_name, GPIB_address)
		if not rm:
			return False
		device_inst = SR830_Interface.SR830(rm, GPIB_address)
		device_type = 'Amplifier'
	elif device_name == 'SWS15101':
		from GUI_Interfaces import SWS15101_Interface
		GPIB_address = 'GPIB0::10::INSTR'
		rm = check_GPIB_connection(device_name, GPIB_address)
		if not rm:
			return False
		device_inst = SWS15101_Interface.SWS15101(rm, GPIB_address)
		device_type = 'Laser'
	elif device_name == 'K2604B':
		num_params = 7 #Source_mode,Source_channel,protection_voltage,protection_current,waveform,pulse_delay,pulse_width
		if len(parameters)<num_params:
			psg.popup(device_name+" requires "+str(num_params)+" parameters")
			return False
		from GUI_Interfaces import K2604B_Interface
		GPIB_address = 'GPIB0::16::INSTR'
		rm = check_GPIB_connection(device_name, GPIB_address)
		if not rm:
			return False
		device_inst = K2604B_Interface.K2604B(rm, GPIB_address, parameters[1], parameters[0])
		device_type = 'Source'
	elif device_name == 'AQ6317B':
		from GUI_Interfaces import AQ6317B_Interface
		GPIB_address = 'GPIB0::22::INSTR' #SYSTEM > MY ADRS
		rm = check_GPIB_connection(device_name, GPIB_address)
		if not rm:
			return False
		device_inst = AQ6317B_Interface.AQ6317B(rm, GPIB_address)
		device_type = 'Spectrum_anlyzer'
	elif device_name == 'AQ6374':
		from GUI_Interfaces import AQ6374_Interface
		GPIB_address = 'GPIB0::22::INSTR' #Should change this to be different from AQ6317B
		rm = check_GPIB_connection(device_name, GPIB_address)
		if not rm:
			return False
		device_inst = AQ6374_Interface.AQ6374(rm, GPIB_address)
		device_type = 'Spectrum_anlyzer'
	elif device_name == 'E4407B':
		from GUI_Interfaces import E4407B_Interface
		GPIB_address = 'GPIB0::18::INSTR'
		rm = check_GPIB_connection(device_name, GPIB_address)
		if not rm:
			return False
		device_inst = E4407B_Interface.E4407B(rm, GPIB_address)
		device_type = 'Spectrum_anlyzer'
	elif device_name == 'B2902A':
		num_params = 7 #Source_mode,Source_channel,protection_voltage,protection_current,waveform,pulse_delay,pulse_width
		if len(parameters)<num_params:
			psg.popup(device_name+" requires "+str(num_params)+" parameters")
			return False
		from GUI_Interfaces import B2902A_Interface
		GPIB_address = 'GPIB0::23::INSTR'
		rm = check_GPIB_connection(device_name, GPIB_address)
		if not rm:
			return False
		device_inst = B2902A_Interface.B2902A(rm, GPIB_address, parameters[1], parameters[0])
		device_type = 'Source'
	elif device_name == 'A86146B':
		from GUI_Interfaces import A8614x_Interface
		GPIB_address = 'GPIB0::24::INSTR'
		rm = check_GPIB_connection(device_name, GPIB_address)
		if not rm:
			return False
		device_inst = A8614x_Interface.A8614x(rm, GPIB_address)
		device_type = 'Spectrum_anlyzer'
	elif device_name == 'A86142A':
		from GUI_Interfaces import A8614x_Interface
		GPIB_address = 'GPIB0::20::INSTR'
		rm = check_GPIB_connection(device_name, GPIB_address)
		if not rm:
			return False
		device_inst = A8614x_Interface.A8614x(rm, GPIB_address)
		device_type = 'Spectrum_anlyzer'
	elif device_name == 'K2520':
		num_params = 7 #Source_mode,Source_channel,protection_voltage,protection_current,waveform,pulse_delay,pulse_width
		if len(parameters)<num_params:
			psg.popup(device_name+" requires "+str(num_params)+" parameters")
			return False
		from GUI_Interfaces import K2520_Interface
		GPIB_address = 'GPIB0::25::INSTR'
		rm = check_GPIB_connection(device_name, GPIB_address)
		if not rm:
			return False
		device_inst = K2520_Interface.K2520(rm, GPIB_address, parameters[1], parameters[0])
		device_type = 'Source'
	elif device_name.lower() == 'off':
		return 'off'
	else:
		psg.popup(device_name+" is not set up for communication")
		return False
	if device_type == 'Source':
		if parameters[0] == 'Current':
			device_inst.set_voltage_protection(parameters[2])
		elif parameters[0] == 'Voltage':
			device_inst.set_current_protection(parameters[3])
		else:
			psg.popup(Source+" mode must be either Current or Voltage")
			return False
		if parameters[4].lower() == "pulsed":
			device_inst.set_waveform('PULSED', parameters[5], parameters[6])
		elif parameters[4].lower() == "dc":
			device_inst.set_waveform('DC')
		else:
			psg.popup("Type must be either pulsed or DC")
			return False
	return device_inst

def check_GPIB_connection(device,GPIB_address):
	rm = pyvisa.ResourceManager()
	GPIB_connection = rm.list_resources()
	if (len(GPIB_connection) <1):
		psg.popup("No GPIB devices detected. You may need to restart the computer.")
		return False
	if GPIB_address in GPIB_connection:
		print(" Connected to",device,"via",GPIB_address)
	else:
		psg.popup("No device found at "+GPIB_address+". Check that the "+device+" is configured to this address.")
		return False
	return rm

def check_or_make_directory(dir_path):
	if not os.path.isdir(dir_path):
		os.makedirs(dir_path)
		print(" Created new directory:", dir_path)

def get_file_locations_GUI(save_data, save_fig, characterization_directory, subfolder_name, device_name, folder_date=date.today().strftime("%Y_%m_%d")):
	csv_location = ''
	png_location = ''
	if save_data or save_fig:
		main_directory = os.path.join(characterization_directory,folder_date,subfolder_name)
		if save_data:
			data_directory = os.path.join(main_directory,'Data')
			check_or_make_directory(data_directory)
			device_name = get_unique_file_path_GUI(data_directory, device_name, '.csv')[1] #ensures unique name to avoid overwriting data
			csv_location = os.path.join(data_directory,device_name + '.csv')
		if save_fig:
			figure_directory = os.path.join(main_directory,'Figures')
			check_or_make_directory(figure_directory)
			device_name = get_unique_file_path_GUI(figure_directory, device_name, '.png')[1] #ensures unique name to avoid overwriting data
			png_location = os.path.join(figure_directory,device_name + '.png')
	return [csv_location, png_location, device_name]

def get_unique_file_path_GUI(directory, old_name, extension):
	file_path = os.path.join(directory,old_name+extension)
	if os.path.isfile(file_path):
		window = psg.Window("Rename",[[psg.Text(old_name+extension+" already taken")],[psg.Text("Enter a new name or overwrite:")],[psg.InputText(old_name,key='name')],[BluePSGButton('Overwrite'),psg.Push(),BluePSGButton('Use New Name'),BluePSGButton('Cancel')]])
		while True: 
			event, values = window.read()
			if event == psg.WIN_CLOSED or event == 'Cancel':
				window.close()
				return 'cancelled', '-NULL-'
			elif event == 'Use New Name':
				name = values['name']
				window.close()
				file_path, name = get_unique_file_path_GUI(directory, name, extension)
				return file_path, name
			elif event == 'Overwrite':
				window.close()
				return file_path, old_name
	else:
		return file_path, old_name

def enforce_number(window,values,event,decimal_allowed=True,negative_allowed=False):
	number_string = values[event]
	if len(number_string):
		if negative_allowed and number_string == '-':
				return
		for i in range(len(number_string)):
			delete = False
			if number_string[i] == '-':
				if i!=0 or not negative_allowed:
					delete = True
			elif number_string[i] == '.':
				if '.' in number_string[:i] or not decimal_allowed:
					delete = True
			elif number_string[i] not in ('0123456789'):
				delete = True
			if delete:
				number_string = number_string[:i]+number_string[i+1:]
				window[event].update(number_string)
				return

def enforce_max_min(window,values,event,max,min,default=0):
	value = values[event]
	if len(value) and value != '-':
		try:
			value = int(value)
			if value > max:
				window[event].update(max)
			elif value < min:
				window[event].update(min)
		except:
			window[event].update(default)

def plot_LIV(device_name, power, current, voltage, show_best_fit=True, show_best_fit_numbers=True, plot_current_density=False, current_area=1, power2=False):
	#If plotting current density, expects area to be [cm^-2]
	#Calculate figure values
	power = [(x - power[0])*1000 for x in power] #converts from [W] to [mW] and zeros background
	if power2:
		power2 = [(x - power2[0])*1000 for x in power2] #converts from [W] to [mW] and zeros background
	current = [x*1000 for x in current] #converts from [A] to [mA]
	#Curve fit to piecewise linear function
	if len(power)<4:
		#can not curve fit
		good_fit = False
		threshold_current = 0
		post_thresh_slope = 0
	else:
		peak = max(power[0],power[1],power[2],power[3])
		for increasing_ends in range(4,len(power)):
			if power[increasing_ends] > peak:
				peak = power[increasing_ends]
			elif power[increasing_ends] < peak-.05:
				break
		current_fit = current[0:increasing_ends]
		power_fit = power[0:increasing_ends]
		threshold_estimate = (min(current_fit)+max(current_fit))/2
		dark_power_estimate = 0 #[mW]
		pre_thresh_slope_estimate = 0.001 #[mW/mA/facet]
		post_thresh_slope_estimate = 0.05 #[mW/mA/facet]
		estimate = [threshold_estimate, dark_power_estimate, pre_thresh_slope_estimate, post_thresh_slope_estimate]
		params,cov = curve_fit(piecewise_linear, current_fit, power_fit, estimate)
		threshold_current = params[0] #[mA]
		pre_thresh_slope = params[2] #[mW/mA/facet]
		post_thresh_slope = params[3] #[mW/mA/facet]
		if cov[0][0]<0:
			sd = math.inf
		else:
			sd = cov[0][0]**0.5
		good_fit = False
		#Check if standard deviation on threshold current is within 1/10 of the value chosen - experimental, consider changing to a better test
		if sd < threshold_current/10 and post_thresh_slope>pre_thresh_slope*1.5:
			good_fit = True
	#Format figure
	fig, ax1 = plt.subplots()
	plt.title(str(device_name))
	plt_colour = 'tab:blue'
	ax1.set_ylabel('Voltage [V]', color=plt_colour)
	if plot_current_density:
		ax1.plot([i/current_area/1000/1000 for i in current], voltage, color=plt_colour)
	else:
		ax1.plot(current, voltage, color=plt_colour)
	ax1.tick_params(axis='y', labelcolor=plt_colour)
	ax2 = ax1.twinx()
	plt_colour = 'tab:red'
	plt_colour_2 = 'tab:purple'
	ax2.set_ylabel('Power [mW]', color=plt_colour)
	if good_fit and show_best_fit:
		if plot_current_density:
			ax2.plot([i/current_area/1000/1000 for i in current_fit], piecewise_linear(current_fit,*params),'--',color='black',label='_nolegend_')
		else:
			ax2.plot(current_fit, piecewise_linear(current_fit,*params),'--',color='black',label='_nolegend_')
	if plot_current_density:
		ax2.plot([i/current_area/1000/1000 for i in current], power, color=plt_colour)
		x_label_string = 'Current Density [kA/cm^2]'
		if power2:
			ax2.plot([i/current_area/1000/1000 for i in current], power2, color=plt_colour_2)
	else:
		ax2.plot(current, power, color=plt_colour)
		x_label_string = 'Current [mA]'
		if power2:
			ax2.plot(current, power2, color=plt_colour_2)
	if good_fit and show_best_fit_numbers:
		ax1.set_xlabel(x_label_string+'\n\nThreshold current = '+"{:.1f}".format(threshold_current)+' mA\nSlope efficiency = '+"{:.1f}".format(post_thresh_slope*1000)+' mW/A/facet')
	else:
		ax1.set_xlabel(x_label_string)
	ax2.tick_params(axis='y', labelcolor=plt_colour)
	plt.tight_layout()
	if power2:
		ax2.legend(['Right facet', 'Left facet'])
	return [fig, threshold_current, post_thresh_slope, good_fit]

def find_FW(x,y,width_y,middle_out=False):
	y = [i for i in y] #convert to list in case of numpy array
	y_max_index = y.index(max(y))
	if middle_out:
		i = len(y)-1
		for i in range(y_max_index+1,len(y)):
			if y[i]<=width_y:
				FW_end = x[i-1]
				break
		if i == len(y)-1:
			FW_end = x[-1]
		i = 0
		for i in range(y_max_index-1,-1,-1):
			if y[i]<=width_y:
				FW_start = x[i+1]
				break
		if i == 0:
			FW_start = x[0]
	else:
		i = len(y)-1
		for i in range(len(y)-1,y_max_index,-1):
			if y[i]>=width_y:
				FW_end = x[i]
				break
		if i == y_max_index+1:
			FW_end = x[-1]
		i = 0
		for i in range(y_max_index-1,-1,-1):
			if y[i]>=width_y:
				FW_start = x[i]
				break
		if i == 0:
			FW_start = x[0]
	FWHM = FW_end-FW_start
	return [FWHM,FW_start,FW_end]

def piecewise_linear(x, x0, b, m1, m2):
	condlist = [x < x0, x >= x0]
	funclist = [lambda x: m1*x + b, lambda x: m1*x + b + m2*(x-x0)]
	return np.piecewise(x, condlist, funclist)

def plot_spectrum(device_name, x_data, power, show_max=False, show_max_numbers=True, show_SMSR=False, peak_width=15, show_FWHM=False, x_is_freq=False):
	#Find peak power
	if x_is_freq:
		max_index = np.argmax(power[1:])+1
	else:
		max_index = np.argmax(power)
	max_x = x_data[max_index]
	max_power = power[max_index]
	#Find SMSR
	peaks = []
	peak_power = []
	peak_distance = int((peak_width-1)/2)
	for i in np.arange(1+peak_distance,len(power)-peak_distance,1):
		if (i < max_index-peak_distance or i > max_index+peak_distance) and power[i] == max(power[i-peak_distance:i+peak_distance]):
			peaks.append(i)
			peak_power.append(power[i])
	SM_index = peak_power.index(max(peak_power))
	SM_power = peak_power[SM_index]
	SM_x = x_data[peaks[SM_index]]
	SMSR = max_power-SM_power;
	#Format figure
	fig, ax = plt.subplots()
	plt.title(str(device_name))
	ax.plot(x_data, power)
	if show_SMSR:
		plt.annotate(text='', xy=(SM_x,SM_power), xytext=(SM_x,max_power), arrowprops=dict(arrowstyle='<->'))
		SMSR_text = plt.text(SM_x,SM_power+SMSR/2,' SMSR = '+str(round(SMSR,2))+' dB ')
		if (x_data[-1]+x_data[0])/2 < SM_x:
			plt.setp(SMSR_text,'horizontalalignment','right')
	HM = max(power)-10*math.log10(2)
	[FWHM,FW_start,FW_end] = find_FW(x_data,power,HM)
	if show_FWHM:
		FWHM_arrow_length = (x_data[-1]-x_data[0])/6
		plt.annotate(text='', xy=(max(FW_start-FWHM_arrow_length,x_data[0]),HM), xytext=(FW_start,HM), arrowprops=dict(arrowstyle='<-'))
		plt.annotate(text='', xy=(min(FW_end+FWHM_arrow_length,x_data[-1]),HM), xytext=(FW_end,HM), arrowprops=dict(arrowstyle='<-'))
		if (x_data[-1]+x_data[0])/2 < (FW_start+FW_end)/2:
			FHWM_text_x = FW_start
		else:
			FHWM_text_x = FW_end
		if x_is_freq:
			FWHM_text = plt.text(FHWM_text_x,HM+3,' FWHM = '+str(round(FWHM*1e3,2))+' MHz ')
		else:
			FWHM_text = plt.text(FHWM_text_x,HM+3,' FWHM = '+str(round(FWHM,2))+' nm ')
		if (x_data[-1]+x_data[0])/2 < (FW_start+FW_end)/2:
			plt.setp(FWHM_text,'horizontalalignment','right')
	if show_max:
		ax.plot(max_x, max_power, 'ok', markerfacecolor="None")
	if show_max_numbers:
		if x_is_freq:
			ax.set_xlabel('Frequency [GHz]\n\nMax Power ='+"{:.1f}".format(max_power)+' dBm at '+"{:.2f}".format(max_x)+' GHz')
		else:
			ax.set_xlabel('Wavelength [nm]\n\nMax Power ='+"{:.1f}".format(max_power)+' dBm at '+"{:.2f}".format(max_x)+' nm')
	else:
		if x_is_freq:
			ax.set_xlabel('Frequency [GHz]')
		else:
			ax.set_xlabel('Wavelength [nm]')
	ax.set_ylabel('Power [dBm]')
	plt.tight_layout()
	return [fig, max_x, max_power, SMSR, FWHM]

def SechSqr(x, offset, amplitude, center, width, suppress_overflow=True):
	if suppress_overflow:
		import warnings
		warnings.filterwarnings("ignore", message="overflow encountered in ")
	return offset+amplitude/(np.cosh((x-center)/width)**2)

def envelope_indices(s, trough_reduction_factor=1, peak_reduction_factor=1):
	#Finds the indices of every trough and peak, or every trough_reduction_factor troughs and peak_reduction_factor peaks.
	s = np.array(s)
	extrema = -np.diff(np.sign(np.diff(s)))
	trough_indices = (extrema < 0).nonzero()[0]+1
	trough_indices_reduced = trough_indices[[i+np.argmin(s[trough_indices[i:i+trough_reduction_factor]]) for i in range(0,len(trough_indices),trough_reduction_factor)]]
	peak_indices = (extrema > 0).nonzero()[0]+1
	peak_indices_reduced = peak_indices[[i+np.argmax(s[peak_indices[i:i+peak_reduction_factor]]) for i in range(0,len(peak_indices),peak_reduction_factor)]]
	return trough_indices_reduced,peak_indices_reduced

def plot_autocorrelator(device_name, time, intensity, envelope_reduction_factor=20, plot_fit=True, plot_envelope=False, plot_lower=False, x_axis_calibrated=True, normalize=True, cutoff_freq=200e12, fit_type='low_pass'):
	if normalize: #normalize to a peak of 8 for an interferometric autocorrelation
		intensity_max = max(intensity)
		intensity = [i*8/intensity_max for i in intensity]
	intensity = np.array(intensity) #[A.U.]
	time = np.array(time) #[fs]
	if fit_type == 'envelope':
		lower_envelope_index, upper_envelope_index = envelope_indices(intensity, envelope_reduction_factor, envelope_reduction_factor)
		#estimate upper envelope fitting parameters and fit
		upper_offset_estimate = np.mean(intensity[upper_envelope_index[0:5]])
		width_estimate = 200 #[fs]
		max_index = np.argmax(intensity)
		max_time = time[max_index]
		upper_params,_ = curve_fit(SechSqr,time[upper_envelope_index],intensity[upper_envelope_index], p0=[upper_offset_estimate, 1-upper_offset_estimate, max_time, width_estimate])
		upper_params[3] = abs(upper_params[3]) #ensure width is positive
		FWHM = upper_params[3]*1.7627 #[fs]
		if plot_lower:
			#estimate lower envelope fitting parameters and fit
			lower_offset_estimate = np.mean(intensity[lower_envelope_index[0:5]])
			min_index = np.argmin(intensity)
			min_time = time[min_index]
			lower_params,_ = curve_fit(SechSqr,time[lower_envelope_index],intensity[lower_envelope_index], p0=[lower_offset_estimate, 0-upper_offset_estimate, min_time, FWHM])
		#incease fitted curve resolution 
		time_mesh = np.linspace(time[0],time[-1],1000)
		#Format figure
		fig, ax1 = plt.subplots()
		plt.plot(time,intensity,color='0.8')
		# legend_string = ["Measured Data","Sech^2"]
		if x_axis_calibrated:
			x_axis_text = 'Time [fs]'
		else:
			x_axis_text = 'Number of data points [uncalibrated]'
		if plot_envelope:
			plt.plot(time[upper_envelope_index],intensity[upper_envelope_index],color='0.1',label='_nolegend_')
			if plot_lower:
				plt.plot(time[lower_envelope_index],intensity[lower_envelope_index],color='0.1',label='_nolegend_')
		if plot_fit:
			plt.plot(time_mesh,SechSqr(time_mesh,*upper_params))
			if x_axis_calibrated:
				x_axis_text += '\nAutocorrelator sech$^2$ FWHM '+"{:.1f}".format(FWHM)+' fs\nCorresponding pulse FWHM '+"{:.1f}".format(FWHM/1.54)+' fs'
			else:
				x_axis_text += '\nAutocorrelator sech$^2$ FWHM '+"{:.1f}".format(FWHM)+' data points\nCorresponding pulse FWHM '+"{:.1f}".format(FWHM/1.54)+' data points'
			if plot_lower:
				plt.plot(time_mesh,SechSqr(time_mesh,*lower_params))
				if x_axis_calibrated:
					x_axis_text += '\nLower autocorrelator sech$^2$ FWHM '+"{:.1f}".format(lower_params[3])+' fs\nCorresponding lower pulse FWHM '+"{:.1f}".format(lower_params[3]/1.54)+' fs'
				else:
					x_axis_text += '\nLower autocorrelator sech$^2$ FWHM '+"{:.1f}".format(lower_params[3])+' data points\nCorresponding lower pulse FWHM '+"{:.1f}".format(lower_params[3]/1.54)+' data points'
		plt.xlabel(x_axis_text)
		plt.ylabel('Intensity [A.U.]')
		plt.title(device_name)
	else:
		#Filter
		Intensity_freq = np.fft.rfft(intensity)
		f = np.fft.rfftfreq(len(time),(time[1]-time[0])*1e-15)
		Intensity_low_freq = [Intensity_freq[i] if f[i]<=cutoff_freq else 0 for i in range(len(Intensity_freq))]
		intensity_low = np.fft.irfft(Intensity_low_freq)
		#Fit
		max_index = np.argmax(intensity_low)
		max_time = time[max_index]
		offset_estimate = abs(Intensity_freq[0])/len(intensity)
		width_estimate = 100 #[fs]
		filtered_params,_ = curve_fit(SechSqr,time,intensity_low, p0=[offset_estimate, 4-offset_estimate, max_time, width_estimate])
		filtered_params[3] = abs(filtered_params[3]) #ensure width is positive
		FWHM = filtered_params[3]*1.7627 #[fs]
		#incease fitted curve resolution 
		time_mesh = np.linspace(time[0],time[-1],1000)
		#Format figure
		fig, ax1 = plt.subplots()
		plt.plot(time,intensity,color='0.8')
		if x_axis_calibrated:
			x_axis_text = 'Time [fs]'
		else:
			x_axis_text = 'Number of data points [uncalibrated]'
		if plot_fit:
			plt.plot(time_mesh,SechSqr(time_mesh,*filtered_params))
			if x_axis_calibrated:
				x_axis_text += '\nAutocorrelator sech$^2$ FWHM '+"{:.1f}".format(FWHM)+' fs\nCorresponding pulse FWHM '+"{:.1f}".format(FWHM/1.54)+' fs'
			else:
				x_axis_text += '\nAutocorrelator sech$^2$ FWHM '+"{:.1f}".format(FWHM)+' data points\nCorresponding pulse FWHM '+"{:.1f}".format(FWHM/1.54)+' data points'
		plt.xlabel(x_axis_text)
		plt.ylabel('Intensity [A.U.]')
		plt.title(device_name)
	return [fig,FWHM/1.54]